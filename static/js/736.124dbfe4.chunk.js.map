{"version":3,"file":"static/js/736.124dbfe4.chunk.js","mappings":"kTAUMA,EAAW,gCACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sCAAmDC,IAD5C,cACxBG,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qDAKlBC,EAAoB,mCAAG,WAAOC,GAAP,gFAC1BC,EAAe,IAAIC,gBAAgB,CACrCC,eAAe,EACfC,SAAU,QACVC,KAAM,EACNL,MAAOA,EACPM,QAASb,IANmB,SASTE,EAAAA,EAAAA,IAAA,UAAaH,EAAb,wBAAqCS,IAT5B,cAS1BL,EAT0B,yBAUzBA,EAASC,KAAKC,SAVW,2CAAH,sDAapBS,EAAiB,mCAAG,WAAOC,GAAP,uFACNb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,oBAA4Cf,EAA5C,oBADM,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKjBY,EAAc,mCAAG,WAAOD,GAAP,uFACHb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,4BAAoDf,EAApD,oBADG,cACpBG,EADoB,yBAEnBA,EAASC,KAAKa,MAFK,2CAAH,sDAkBdC,EAAgB,mCAAG,WAAOH,GAAP,uFACLb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,4BAAoDf,EAApD,oBADK,cACtBG,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qD,+LCpDhBc,EAAWC,EAAAA,EAAAA,GAAH,2aAuBRC,GAPOD,EAAAA,EAAAA,GAAH,4GAOIA,EAAAA,EAAAA,IAAH,0TAgBLE,EAAOF,EAAAA,EAAAA,EAAH,sLAUJG,EAAOH,EAAAA,EAAAA,EAAH,oJ,GAQGA,EAAAA,EAAAA,EAAH,uT,QCFjB,EA/Ca,WACT,OAAkCI,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGZ,6FACIH,GAAa,GADjB,mBAGoCd,EAAAA,EAAAA,IAAee,GAHnD,UAKqC,KAFvBG,EAHd,QAK0BC,OAL1B,uBAMkBR,EAAQ,IAAIS,MAAM,8DACxBR,EAASD,GAPrB,0BAUQD,EAAaQ,GAVrB,kDAYQN,EAAS,EAAD,IAZhB,yBAcQE,GAAa,GAdrB,sFAHY,0DACZO,EAmBH,GAAE,CAACN,KAGA,gCACKJ,GAASW,EAAAA,OAAAA,QAAA,UAAkBX,EAAMY,UACjCV,IAAa,SAACW,EAAA,EAAD,KACd,SAACrB,EAAD,UACCM,EAAUgB,KAAI,gBAAG1B,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACX,2BACI,SAACvB,EAAD,CACIwB,IAAKH,EAAY,0CAAsCA,GAtC3E,4JAuCoBI,IAAKH,EAAMI,MAAO,OACtB,SAACzB,EAAD,UAAOqB,KACP,SAACpB,EAAD,UAAOqB,MALF7B,EADE,QAY1B,C","sources":["API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n\n\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4bf7f5d1496efdab827169a7539a0778';\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchMoviesWithQuery = async (query) => {\n    const searchParams = new URLSearchParams({\n        include_adult: false,\n        language: 'en-US',\n        page: 1,\n        query: query,\n        api_key: API_KEY,\n    });\n\n    const response = await axios.get(`${BASE_URL}search/movie?${searchParams}`);\n    return response.data.results;\n};\n\nexport const fetchMovieDetails = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const fetchMovieCast = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\n// const options = {\n//   method: 'GET',\n//   headers: {\n//     accept: 'application/json',\n//     Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0YmY3ZjVkMTQ5NmVmZGFiODI3MTY5YTc1MzlhMDc3OCIsInN1YiI6IjY0NzEyN2RhZGQ3MzFiMDExNzhlYzZlMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RrkdZNtfUqvCldRS1DqYNffe8qOP4511snz_qPb9ze0'\n//   }\n// };\n\n// fetch('https://api.themoviedb.org/3/movie/447277/reviews?language=en-US&page=1', options)\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\nexport const fetchMovieReview = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n    return response.data.results;\n};\n\n// class FetchTheMovieDbAPI {\n//     #period = 'day';\n//     #BASE_URL = 'https://api.themoviedb.org/3/';\n//     #API_KEY = '4bf7f5d1496efdab827169a7539a0778';\n//     poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\n\n//     search = null;\n//     page = 1;\n\n//     async fetchPopMovies() {\n//         try {\n//         return await axios.get(\n//             `${this.#BASE_URL}trending/movie/${this.#period}?api_key=${this.#API_KEY}&page=${this.page}`\n//         );\n//         } catch (error) {\n//         throw new Error(error.message);\n//         }\n//     };\n\n//     async fetchMovie(searchQuery) {\n//         try {\n//             const response = await axios.get(`${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&language=en-US&page=${this.page}&query=${searchQuery}`);\n//             return response.data;\n//         } catch (error) {\n//             throw new Error(error.message);\n//         };\n//     };\n// }\n\n// export const api = new FetchTheMovieDbAPI();","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    list-style: none;\n\n    > li {\n        flex-basis: calc((100% - 6 * (10px)) / 7);\n        border-radius: 5px;\n        background-color: #ffffff; \n        box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08), 0px 3px 3px rgba(0, 0, 0, 0.02), 1px 3px 4px rgba(0, 0, 0, 0.08);\n    }\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n    margin-bottom: 30px;\n`;\n\nexport const Image = styled.img`\n    width: 100%;\n    // height: 100%;\n    height: 304px;\n    display: block;\n    object-fit: contain;\n    border-radius: 5px;\n\n    transition: var(--transition);\n    &:hover,\n    &:focus {\n        border-bottom-left-radius: 0px;\n        border-bottom-right-radius: 0px;\n    }\n`;\n\nexport const Name = styled.p`\nfont-size: 16px;\nfont-weight: 500;\npadding-top: 12px;\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-bottom: 12px;\n    text-align: center;\n`;\n\nexport const Role = styled.p`\n// padding-top: 12px;\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-bottom: 12px;\n    text-align: center;\n`;\n\nexport const Info = styled.p`\n    // height: 36px;\n    font-weight: 500;\n    font-size: 14px;\n    padding-top: 12px;\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-bottom: 12px;\n    color: var(--primary-text-color);\n    text-transform: uppercase;\n    line-height: 1.16;\n    text-align: center;\n`;","import { fetchMovieCast } from \"API\";\nimport { Notify } from \"notiflix\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"components/Loader/Loader\";\nimport { CastList, Image, Name, Role } from \"./Cast.styled\";\n\nconst DEFAULT_PROFILE_URL =\n    'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n\nconst Cast = () => {\n    const [movieCast, setMovieCast] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        fetchCast();\n\n        async function fetchCast() {\n            setIsLoading(true);\n            try {\n                const responseMovie = await fetchMovieCast(movieId);\n\n                if (responseMovie.length === 0) {\n                    const error = new Error('Sorry, there is no info about movie you are searching for.')\n                    setError(error);\n                    return;\n                };\n                setMovieCast(responseMovie);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            };\n        };\n    }, [movieId]);\n\n    return (\n        <>\n            {error && Notify.failure(`${error.message}`)}\n            {isLoading && <Loader />}\n            <CastList>\n            {movieCast.map(({ id, profile_path, name, character}) => (\n                <li key={id}>\n                    <Image\n                        src={profile_path ? `https://image.tmdb.org/t/p/w154/${profile_path}` : DEFAULT_PROFILE_URL}\n                        alt={name} width={154}/>\n                    <Name>{name}</Name>\n                    <Role>{character}</Role>\n                </li>\n            ))}\n            </CastList>\n        </>\n    );\n};\n\nexport default Cast;"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchMoviesWithQuery","query","searchParams","URLSearchParams","include_adult","language","page","api_key","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReview","CastList","styled","Image","Name","Role","useState","movieCast","setMovieCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","responseMovie","length","Error","fetchCast","Notify","message","Loader","map","profile_path","name","character","src","alt","width"],"sourceRoot":""}