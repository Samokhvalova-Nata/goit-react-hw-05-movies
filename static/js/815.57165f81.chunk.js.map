{"version":3,"file":"static/js/815.57165f81.chunk.js","mappings":"kTAUMA,EAAW,gCACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sCAAmDC,IAD5C,cACxBG,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qDAKlBC,EAAoB,mCAAG,WAAOC,GAAP,gFAC1BC,EAAe,IAAIC,gBAAgB,CACrCC,eAAe,EACfC,SAAU,QACVC,KAAM,EACNL,MAAOA,EACPM,QAASb,IANmB,SASTE,EAAAA,EAAAA,IAAA,UAAaH,EAAb,wBAAqCS,IAT5B,cAS1BL,EAT0B,yBAUzBA,EAASC,KAAKC,SAVW,2CAAH,sDAapBS,EAAiB,mCAAG,WAAOC,GAAP,uFACNb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,oBAA4Cf,EAA5C,oBADM,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKjBY,EAAc,mCAAG,WAAOD,GAAP,uFACHb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,4BAAoDf,EAApD,oBADG,cACpBG,EADoB,yBAEnBA,EAASC,KAAKa,MAFK,2CAAH,sDAkBdC,EAAgB,mCAAG,WAAOH,GAAP,uFACLb,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BgB,EAA9B,4BAAoDf,EAApD,oBADK,cACtBG,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qD,4GCnDhBc,EAAaC,EAAAA,EAAAA,GAAH,kbAcVC,GAAWD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,oDAIRG,EAAQH,EAAAA,EAAAA,IAAH,6QAcLI,EAAOJ,EAAAA,EAAAA,EAAH,oT,SCTjB,EAnBuB,SAAC,GAAwB,IAAtBL,EAAqB,EAArBA,GAAIU,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MACzBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAACT,EAAD,WACI,UAACE,EAAD,CAAUQ,GAAE,kBAAad,GAAMe,MAAO,CAAEC,KAAMJ,GAA9C,WACI,SAACJ,EAAD,CAAOS,IAAKP,EAAG,0CAAsCA,GARjE,6EAQ6FQ,IAAKP,EAAOQ,QAAQ,UACrG,SAACV,EAAD,UAAOE,QAItB,EChBYS,EAAOf,EAAAA,EAAAA,GAAH,4GCoBjB,EAlBmB,SAAC,GAAgB,IAAdgB,EAAa,EAAbA,OAClB,OACI,SAACD,EAAD,UACKC,EAAOC,KAAI,gBAAGtB,EAAH,EAAGA,GAAIW,EAAP,EAAOA,MAAOY,EAAd,EAAcA,YAAd,OACR,SAAC,EAAD,CAEIvB,GAAIA,EACJW,MAAOA,EACPD,IAAKa,GAHAvB,EAFD,KASvB,C,2KCdYwB,E,QAAQnB,EAAAA,GAAH,iI,SCoClB,EA/Ba,WACT,OAA4BoB,EAAAA,EAAAA,UAAS,IAArC,eAAOJ,EAAP,KAAeK,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGZ,2FACAD,GAAa,GADb,mBAGiC5C,EAAAA,EAAAA,MAHjC,OAGU8C,EAHV,OAIIN,EAAUM,GAJd,gDAMIJ,EAAS,EAAD,IANZ,yBAQAE,GAAa,GARb,qFAHY,0DACZG,EAaH,GAAE,KAGC,4BACKN,GAASO,EAAAA,OAAAA,QAAA,UAAkBP,EAAMQ,WAClC,SAACX,EAAD,UAAO,mBACNK,IAAa,SAACO,EAAA,EAAD,KACd,SAACC,EAAA,EAAD,CAAYhB,OAAQA,MAG/B,C","sources":["API.js","components/MoviesListItem/MoviesListItem.styled.jsx","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home.styled.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n\n\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4bf7f5d1496efdab827169a7539a0778';\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchMoviesWithQuery = async (query) => {\n    const searchParams = new URLSearchParams({\n        include_adult: false,\n        language: 'en-US',\n        page: 1,\n        query: query,\n        api_key: API_KEY,\n    });\n\n    const response = await axios.get(`${BASE_URL}search/movie?${searchParams}`);\n    return response.data.results;\n};\n\nexport const fetchMovieDetails = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const fetchMovieCast = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\n// const options = {\n//   method: 'GET',\n//   headers: {\n//     accept: 'application/json',\n//     Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0YmY3ZjVkMTQ5NmVmZGFiODI3MTY5YTc1MzlhMDc3OCIsInN1YiI6IjY0NzEyN2RhZGQ3MzFiMDExNzhlYzZlMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RrkdZNtfUqvCldRS1DqYNffe8qOP4511snz_qPb9ze0'\n//   }\n// };\n\n// fetch('https://api.themoviedb.org/3/movie/447277/reviews?language=en-US&page=1', options)\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\nexport const fetchMovieReview = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n    return response.data.results;\n};\n\n// class FetchTheMovieDbAPI {\n//     #period = 'day';\n//     #BASE_URL = 'https://api.themoviedb.org/3/';\n//     #API_KEY = '4bf7f5d1496efdab827169a7539a0778';\n//     poster_sizes = ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'];\n\n//     search = null;\n//     page = 1;\n\n//     async fetchPopMovies() {\n//         try {\n//         return await axios.get(\n//             `${this.#BASE_URL}trending/movie/${this.#period}?api_key=${this.#API_KEY}&page=${this.page}`\n//         );\n//         } catch (error) {\n//         throw new Error(error.message);\n//         }\n//     };\n\n//     async fetchMovie(searchQuery) {\n//         try {\n//             const response = await axios.get(`${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&language=en-US&page=${this.page}&query=${searchQuery}`);\n//             return response.data;\n//         } catch (error) {\n//             throw new Error(error.message);\n//         };\n//     };\n// }\n\n// export const api = new FetchTheMovieDbAPI();","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesItem = styled.li`\n    flex-basis: calc((100% - 3 * (30px)) / 4); \n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08), 0px 3px 3px rgba(0, 0, 0, 0.02), 1px 3px 4px rgba(0, 0, 0, 0.08);\n\n    transition: box-shadow var(--transition), transform var(--transition);\n    &:hover,\n    &:focus {\n        box-shadow: var(--card-shadow);\n        transform: scale(1.02);\n    }\n`;\n\nexport const ItemLink = styled(Link)`\n    text-decoration: none;\n`;\n\nexport const Image = styled.img`\n    width: 100%;\n    display: block;\n    object-fit: cover;\n    border-radius: 5px;\n\n    transition: var(--transition);\n    &:hover,\n    &:focus {\n        border-bottom-left-radius: 0px;\n        border-bottom-right-radius: 0px;\n    }\n`;\n\nexport const Info = styled.p`\n    height: 36px;\n    font-weight: 500;\n    font-size: 14px;\n    padding-top: 12px;\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-bottom: 12px;\n    color: var(--primary-text-color);\n    text-transform: uppercase;\n    line-height: 1.16;\n    text-align: center;\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from \"react-router-dom\";\nimport { Image, Info, ItemLink, MoviesItem } from './MoviesListItem.styled';\n\nconst DEFAULT_POSTER_URL =\n    'https://motivatevalmorgan.com/wp-content/uploads/2016/06/default-movie.jpg';\n\nconst MoviesListItem = ({ id, url, title }) => {\n    const location = useLocation();\n\n    return (\n        <MoviesItem>\n            <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n                <Image src={url ? `https://image.tmdb.org/t/p/w342/${url}` : DEFAULT_POSTER_URL} alt={title} loading=\"lazy\" />\n                <Info>{title}</Info>\n            </ItemLink>\n        </MoviesItem>\n    );\n};\n\nMoviesListItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string,\n};\n\nexport default MoviesListItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n    margin-bottom: 30px;\n`;","import PropTypes from 'prop-types';\nimport MoviesListItem from \"components/MoviesListItem/MoviesListItem\";\nimport { List } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n    return (\n        <List>\n            {movies.map(({ id, title, poster_path}) => (\n                <MoviesListItem\n                    key={id}\n                    id={id}\n                    title={title}\n                    url={poster_path} />\n            ))}\n        </List>\n    );\n};\n\nMoviesList.propTypes = {\n    movies: PropTypes.array,\n};\n\nexport default MoviesList;","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n    text-align: center;\n    text-transform: uppercase;\n    margin-bottom: 15px;\n    font-size: 20px;\n`;","import { useState, useEffect } from \"react\";\nimport { fetchPopularMovies } from '../API';\nimport { Notify } from \"notiflix\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport Loader from \"components/Loader/Loader\";\nimport { Title } from \"./Home.styled\";\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        fetchTrendingMovies();\n\n        async function fetchTrendingMovies() {\n        setIsLoading(true);\n        try {\n            const responseMovies = await fetchPopularMovies();\n            setMovies(responseMovies);\n        } catch (error) {\n            setError(error);\n        } finally {\n        setIsLoading(false);\n        };\n        };\n    }, [])\n\n    return (\n        <main>\n            {error && Notify.failure(`${error.message}`)}\n            <Title>Trending today</Title>\n            {isLoading && <Loader />}\n            <MoviesList movies={movies} />\n        </main>\n    );\n};\n\nexport default Home;"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchMoviesWithQuery","query","searchParams","URLSearchParams","include_adult","language","page","api_key","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReview","MoviesItem","styled","ItemLink","Link","Image","Info","url","title","location","useLocation","to","state","from","src","alt","loading","List","movies","map","poster_path","Title","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","responseMovies","fetchTrendingMovies","Notify","message","Loader","MoviesList"],"sourceRoot":""}